import fs from "fs";
import { InlineKeyboard } from "grammy";

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–¥–µ–∏
const ideas = JSON.parse(fs.readFileSync("src/data/ideas.json", "utf-8"));
console.log("Loaded ideas:", ideas);

// –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
const categories = Object.keys(ideas);
const categoryKeyboard = new InlineKeyboard();
categories.forEach((category, index) => {
    categoryKeyboard.text(category, `category:${encodeURIComponent(category)}`);
    if ((index + 1) % 2 === 0) categoryKeyboard.row();
});

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /ideas
export function ideasCommand(ctx) {
    ctx.reply(
        "üé® –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç –±–æ—è–∑–Ω–∏ –±–µ–ª–æ–≥–æ –ª–∏—Å—Ç–∞ –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –∏–¥–µ—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.\n\n–í—ã–±–µ—Ä–∏ –æ–¥–Ω–æ –∏–∑ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–∏–∂–µ:",
        { reply_markup: categoryKeyboard }
    );
}

// –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async function removeOldButtons(ctx) {
    if (ctx.session.lastIdeaMessageId) {
        try {
            await ctx.api.editMessageReplyMarkup(ctx.chat.id, ctx.session.lastIdeaMessageId, {
                reply_markup: undefined,
            });
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–æ–∫ —É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
        }
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
export async function handleCategorySelection(ctx, categoryFromRetry = null) {
    console.log("ctx.match:", ctx.match);
    console.log("Session category before selection:", ctx.session.selectedCategory);

    const category = categoryFromRetry || ctx.match?.input?.split(":")[1] || ctx.session.selectedCategory;
    console.log("Selected category:", category);

    if (!category || !ideas[decodeURIComponent(category)]) {
        return ctx.reply("‚ùå –û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.");
    }

    ctx.session.selectedCategory = decodeURIComponent(category);

    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç (–∏–¥–µ—è –∏–ª–∏ file_id)
    const randomItem = ideas[ctx.session.selectedCategory][Math.floor(Math.random() * ideas[ctx.session.selectedCategory].length)];
    console.log("Randomly selected item:", randomItem);

    let newMsg;
    if (/^[A-Za-z0-9_-]{30,}$/.test(randomItem)) {
        // –≠—Ç–æ file_id, –∑–Ω–∞—á–∏—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
        await removeOldButtons(ctx);
        newMsg = await ctx.replyWithPhoto(randomItem, {
            caption: "–í–æ—Ç —Ñ–æ—Ç–æ –¥–ª—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —ç—Ç—É –∏–¥–µ—é! üì∏",
        });
    } else {
        // –≠—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–∞—è –∏–¥–µ—è
        const actionKeyboard = new InlineKeyboard()
            .text("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë", "retry")
            .text("–ù–∞–∑–∞–¥", "back");

        await removeOldButtons(ctx);
        newMsg = await ctx.reply(`‚ú® *–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:* ${ctx.session.selectedCategory}\nüí° *–ò–¥–µ—è:* ${randomItem}`, {
            reply_markup: actionKeyboard,
            parse_mode: "Markdown",
        });
    }

    ctx.session.lastIdeaMessageId = newMsg.message_id;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑"
export async function handleRetry(ctx) {
    if (!ctx.session.selectedCategory) {
        return ctx.answerCallbackQuery("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ!");
    }

    await handleCategorySelection(ctx, ctx.session.selectedCategory);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
export async function handleBack(ctx) {
    ctx.session.selectedCategory = null;

    await removeOldButtons(ctx);

    const newMsg = await ctx.reply("üé® –í—ã–±–µ—Ä–∏ –æ–¥–Ω–æ –∏–∑ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–∏–∂–µ:", { 
        reply_markup: categoryKeyboard 
    });

    ctx.session.lastIdeaMessageId = newMsg.message_id;
}